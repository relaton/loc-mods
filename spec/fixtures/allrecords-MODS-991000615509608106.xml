<?xml version="1.0" encoding="utf-8"?>
<modsCollection xmlns="http://www.loc.gov/mods/v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.loc.gov/mods/v3 http://www.loc.gov/standards/mods/v3/mods-3-7.xsd">
<mods version="3.7">
      <titleInfo>
         <title>SATE VI report</title>
         <subTitle>bug injection and collection</subTitle>
      </titleInfo>
      <name type="personal" usage="primary">
         <namePart>Delaitre, Aurelien.</namePart>
      </name>
      <name xmlns:xlink="http://www.w3.org/1999/xlink" type="personal" xlink:href="(orcid)0000-0003-1404-7523">
         <namePart>Delaitre, Aurelien.</namePart>
         <nameIdentifier>(orcid)0000-0003-1404-7523</nameIdentifier>
      </name>
      <name type="personal">
         <namePart>Loembe, Alex-Kevin.</namePart>
      </name>
      <name xmlns:xlink="http://www.w3.org/1999/xlink" type="personal" xlink:href="(orcid)0000-0002-7561-6614">
         <namePart>Black, Paul E.</namePart>
         <nameIdentifier>(orcid)0000-0002-7561-6614</nameIdentifier>
      </name>
      <name xmlns:xlink="http://www.w3.org/1999/xlink" type="personal" xlink:href="(orcid)0000-0003-2391-3681">
         <namePart>Okun, Vadim Guillaume.</namePart>
         <nameIdentifier>(orcid)0000-0003-2391-3681</nameIdentifier>
      </name>
      <name type="personal">
         <namePart>Cupif, Damien.</namePart>
      </name>
      <name xmlns:xlink="http://www.w3.org/1999/xlink" type="personal" xlink:href="(orcid)0000-0002-6290-4959">
         <namePart>Haben, Guillaume.</namePart>
         <nameIdentifier>(orcid)0000-0002-6290-4959</nameIdentifier>
      </name>
      <name type="personal">
         <namePart>Prono, Yann.</namePart>
      </name>
      <name type="corporate">
         <namePart>National Institute of Standards and Technology (U.S.)</namePart>
         <namePart>Information Technology Laboratory.</namePart>
      </name>
      <typeOfResource>text</typeOfResource>
      <genre authority="marcgt">dictionary</genre>
      <genre authority="rdacontent">text</genre>
      <originInfo>
         <place>
            <placeTerm type="code" authority="marccountry">r 0</placeTerm>
         </place>
         <dateIssued encoding="marc">2023</dateIssued>
         <issuance>monographic</issuance>
      </originInfo>
      <originInfo eventType="publisher">
         <place>
            <placeTerm type="text">Gaithersburg, MD:</placeTerm>
         </place>
         <publisher>U.S. Dept. of Commerce, National Institute of Standards and
                Technology;</publisher>
         <dateIssued>2023-06-14.</dateIssued>
      </originInfo>
      <physicalDescription>
         <form type="carrier" authority="rdacarrier">online resource</form>
         <extent>1 online resource : Information Technology Laboratory.</extent>
      </physicalDescription>
      <abstract displayLabel="Summary">The SATE VI report presents the results of a security-focused bug
                finding evaluation exercise carried out from 2018 to 2023 on various code bases
                using static analysis tools. Existing bugs were extracted from bug tracker reports
                and the CVE/NVD database, and additional bugs were injected using automated tools
                and manual analysis. The results of this exercise showed significant variability
                across tool effectiveness, depending on the test cases, bug classes, and bug
                complexity involved. The report discusses the shortcomings and difficulties
                encountered during the bug injection process, which marginally impeded the
                efficiency of the evaluation. The report emphasizes the correlation between high
                code complexity and tool difficulty in identifying bugs. Recall and discrimination
                rates were lower for the convoluted C Track than the considerably less complex Java
                Track. Across all languages and code bases, tools found bugs with lower complexity
                more readily than bugs with higher complexity. Finding rates varied for different
                bug classes, in line with the inherent complexity of each bug class (e.g., recall
                for simpler initialization errors was greater than on more intricate buffer errors).
                The report discusses the shortcomings of the bug injection process. Regardless of
                the test case, injected bugs were not found by tools at the same rate as existing
                bugs, implying that their quality needs to improve. The report also includes a
                summary of the Ockham Sound Analysis Criteria track, which focused on tools that do
                not report false positives or false negatives. The SATE VI report concludes that
                static analysis is a useful technique to find real security bugs in large code
                bases. The right set of tools, used properly, can help increase code quality and
                security. Potential users should test a tool or set of tools on their own code base
                before using them in production. The metrics presented in SATE VI are suitable for
                assessing tool fitness for such a use case.</abstract>
      <note type="statement of responsibility">Aurelien Delaitre; Paul E. Black; Damien Cupif; Guillaume Haben;
                Alex-Kevin Loembe; Vadim Okun; Yann Prono.</note>
      <note>June 2023.</note>
      <note>Title from PDF title page (viewed November 10, 2023).</note>
      <note type="bibliography">Includes bibliographical references.</note>
      <note type="venue">Approved by the NIST Editorial Review Board on 2023-06-07.</note>
      <note type="system details">Mode of access: World Wide Web.</note>
      <note type="system details">Systems requirements: Adobe Acrobat PDF reader.</note>
      <subject authority="lcsh">
         <topic>Computer security</topic>
      </subject>
      <subject>
         <topic>Static analysis.</topic>
      </subject>
      <subject>
         <topic>Cybersecurity.</topic>
      </subject>
      <subject>
         <topic>Bug Injection.</topic>
      </subject>
      <subject>
         <topic>Software vulnerability.</topic>
      </subject>
      <subject>
         <topic>Software assurance.</topic>
      </subject>
      <subject>
         <topic>Software testing.</topic>
      </subject>
      <subject>
         <topic>Cybersecurity measurement.</topic>
      </subject>
      <subject>
         <topic>Cybersecurity education and workforce development.</topic>
      </subject>
      <location>
         <url displayLabel="electronic resource" usage="primary display">https://doi.org/10.6028/NIST.SP.500-341</url>
      </location>
      <relatedItem type="series">
         <titleInfo>
            <title>NIST special publication</title>
            <partNumber>500-341</partNumber>
         </titleInfo>
      </relatedItem>
      <relatedItem type="series">
         <titleInfo>
            <title>NIST special publication; NIST special pub; NIST SP</title>
            <partNumber>500-341</partNumber>
         </titleInfo>
      </relatedItem>
      <identifier type="oclc">1412210896</identifier>
      <recordInfo>
         <descriptionStandard>rda</descriptionStandard>
         <recordContentSource authority="marcorg">NBS</recordContentSource>
         <recordCreationDate encoding="marc">230803</recordCreationDate>
         <recordChangeDate encoding="iso8601">20240401111359.0</recordChangeDate>
         <recordIdentifier>991000615509608106</recordIdentifier>
         <recordOrigin>Converted from MARCXML to MODS version 3.7 using MARC21slim2MODS3-7.xsl
				(Revision 1.140 20200717)</recordOrigin>
         <languageOfCataloging>
            <languageTerm authority="iso639-2b" type="code">eng</languageTerm>
         </languageOfCataloging>
      </recordInfo>
   </mods></modsCollection>
